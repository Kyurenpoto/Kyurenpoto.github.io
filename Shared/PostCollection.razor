<Styled>    
    .collection-wrapper {
        display: grid;
        grid-template-columns: 1fr;
    }

    .post-collection {
        grid-column: 1;
        display: flex;
        flex-direction: row-reverse;
        flex-wrap: wrap;
        justify-content: flex-end;
        align-content: flex-start;
    }

    .card-wrapper {
        margin-bottom: 32px;
        width: 100%;
        display: grid;
        grid-template-columns: 1fr;
    }

        .card-wrapper > .overlay-wrap {
            grid-column: 1;
        }

    .post-summary-card {
        padding: 16px;
        display: grid;
        grid-template-rows: 1fr auto 1fr;
        gap: 8px;
    }

    .card-title > a {
        color: #d7d7d7;
        font-weight: 800;
        text-decoration: none;
    }

    .card-created, .card-modified {
        display: none;
    }

    .card-contents {
        display: grid;
        grid-template-columns: 1fr 2fr;
        gap: 8px;
    }

    .card-image {
        grid-column: 1;
        position: relative;
        width: 100%;
        height: 0;
        padding-bottom: 100%;
    }

        .card-image > img {
            position: absolute;
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            width: 100%;
            height: 100%;
        }

    .card-description {
        grid-column: 2;
    }

    .card-tags {
        position: absolute;
        bottom: 8px;
        font-size: 0.8rem;
        font-style: italic;
    }

        .card-tags > a {
            color: #d7d7d7;
            text-decoration: none;
        }

    @@media (min-width: 768px) {   
        .collection-wrapper {
            grid-template-columns: 1fr 8fr;
        }

        .post-collection {
            grid-column: 2;
        }

        .card-wrapper {
            width: 100%;
            display: grid;
            grid-template-columns: 3fr 1fr;
        }
    }

    @@media (min-width: 1368px) {       
        .card-wrapper {
            width: 50%;
        }
    }
</Styled>

<h1>@title</h1>

<div class="collection-wrapper">
    <section class="post-collection">
        @foreach (var item in Cards.Where(x => x.Category.Equals(collectionName)))
        {
            <div class="card-wrapper">
                <div class="overlay-wrap">
                    <article class="post-summary-card">
                        <header>
                            <div class="card-title">
                                <NavLink href="@item.Path">@item.Title</NavLink>
                            </div>
                            <div class="card-modified">@item.DateModified</div>
                            <div class="card-created">@item.DateCreated</div>
                        </header>
                        <div class="card-contents">
                            <div class="card-image">
                                <img src="@item.PathCardImage" alt="@item.ImageDescription">
                            </div>
                            <div class="card-description">@item.Description</div>
                        </div>
                        <footer>
                            <div class="card-tags">
                                @foreach(var tag in item.Tags.Split(";"))
                                {
                                    <NavLink href="">@tag</NavLink>
                                }
                            </div>
                        </footer>
                    </article>
                    <div class="overlay-secondary-bg-1" />
                </div>
            </div>
        }
    </section>
</div>

@code {
    [Parameter]
    public string collectionName { get; set; }

    [Parameter]
    public string title { get; set; }

    public static Dictionary<string, List<int>> Collections = new Dictionary<string, List<int>>
    {
        {
            "machine-learning",
            new List<int>
            {
                1
            }
        }
    };

    public class PostCard
    {
        public string Path { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public string PathCardImage { get; set; }
        public string ImageDescription { get; set; }
        public string Category { get; set; }
        public string Tags { get; set; }
        public DateTime DateCreated { get; set; }
        public DateTime DateModified { get; set; }
    }

    public List<PostCard> Cards = new List<PostCard>
    {
        new PostCard
        {
            Path = "post/1",
            Title = "논문 리뷰: Implicit Neural Representations with Periodic Activation Functions",
            Description = "기존의 ReLU 기반 MLP는 입력 신호의 고차 미분을 나타낼 수 없기 때문에 미세 표현 능력이 부족하다. 이 논문에서는 주기 함수를 활성 함수로 사용해서 고차 미분 정보를 회손하지 않도록 했다.",
            PathCardImage = "assets/images/sine-curve.png",
            ImageDescription = "sine curve",
            Category = "Machine Learning",
            Tags = "Neural Network > Activation Function",
            DateCreated = new DateTime(2020, 07, 05, 02, 12, 22),
            DateModified = new DateTime(2020, 07, 05, 02, 12, 22)
        },
    };
}
